---
import DashboardAdmin from "../../layout/dashboard-admin.astro";
import { Card, CardHeader, CardTitle, CardContent } from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import { DashboardService } from '../../lib/dashboard-service';

// Initialize default values
let dashboardStats = {
  total_pendaftar: 0,
  total_mentor: 0,
  total_beswan: 0,
  total_dokumen: 0,
  dokumen_terverifikasi: 0,
  konten_aktif: 0,
  user_aktif: 0
};

interface PeriodStat {
  period_name: string;
  count: number;
}

let applicationStats = {
  total: 0,
  pending: 0,
  approved: 0,
  rejected: 0,
  by_period: [] as PeriodStat[]
};

// In Astro SSR context, localStorage isn't available
// We'll rely on client-side fetching via the script tag

// Format dates for display
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('id-ID', { 
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};
---

<DashboardAdmin>  <!-- Inline script for immediate admin name update -->
  <script is:inline>
    // This script runs immediately in the browser when the HTML is parsed
    // Attempt to update the admin name as early as possible
    (function() {
      // Function to find the admin name element using multiple strategies
      function findAdminNameElement() {
        // Strategy 1: Direct ID lookup
        let el = document.getElementById('admin-name');
        if (el) return el;
        
        // Strategy 2: Class lookup
        el = document.querySelector('.admin-name-span');
        if (el) return el;
        
        // Strategy 3: Attribute lookup
        el = document.querySelector('[data-element-type="welcome-title"] span');
        if (el) return el;
        
        // Strategy 4: Context-based lookup
        const titles = document.querySelectorAll('.CardTitle, h1, h2, h3, h4');
        for (const title of titles) {
          if (title.textContent && title.textContent.includes('Selamat Datang')) {
            const span = title.querySelector('span');
            if (span) return span;
            
            // If no span but has "Admin" text, we can't update it without modifying innerHTML
            // which we'll skip here for safety
          }
        }
        
        return null;
      }
      
      // Function to update the admin name
      function updateAdminName(userName) {
        if (!userName) return false;
        
        // First attempt
        const element = findAdminNameElement();
        if (element) {
          element.textContent = userName;
          console.log("Immediately updated admin name to:", userName);
          return true;
        }
        
        console.log("Admin name element not found on first try, will attempt again after delay");
        // Try again after a short delay (for hydration to complete)
        setTimeout(() => {
          const delayedElement = findAdminNameElement();
          if (delayedElement) {
            delayedElement.textContent = userName;
            console.log("Updated admin name after delay to:", userName);
          } else {
            console.error("Failed to find admin name element even after delay");
            
            // Last resort: Use mutation observer to catch when the element appears
            const observer = new MutationObserver((mutations, obs) => {
              const foundElement = findAdminNameElement();
              if (foundElement) {
                foundElement.textContent = userName;
                console.log("Updated admin name via mutation observer to:", userName);
                obs.disconnect(); // Stop observing once we've updated
              }
            });
            
            observer.observe(document.body, { 
              childList: true, 
              subtree: true 
            });
            
            // Stop observing after 5 seconds (safety timeout)
            setTimeout(() => observer.disconnect(), 5000);
          }
        }, 200);
      }
      
      try {
        const token = localStorage.getItem('bersekolah_auth_token');
        if (!token) return;
        
        // Create a promise to fetch user data
        const baseURL = (window.import?.meta?.env?.PUBLIC_API_BASE_URL || 'http://localhost:8000/api');
        console.log(`Inline script fetching from: ${baseURL}/user`);
        
        fetch(baseURL + '/user', {
          headers: {
            'Authorization': 'Bearer ' + token,
            'Accept': 'application/json'
          }
        })
        .then(response => {
          if (response.ok) return response.json();
          throw new Error('Failed to fetch user data, status: ' + response.status);
        })
        .then(user => {
          if (user && user.name) {
            console.log("Got user data:", user.name);
            // Store name in global scope for emergency fallbacks
            window.__adminUserName = user.name;
            // Try to update right away
            updateAdminName(user.name);
          }
        })
        .catch(err => console.error('Early admin name update failed:', err));
        
        // Also hook into DOMContentLoaded as a backup
        document.addEventListener('DOMContentLoaded', function() {
          if (window.__adminUserName) {
            updateAdminName(window.__adminUserName);
          }
        });
      } catch (err) {
        console.error('Inline admin name script error:', err);
      }
    })();
  </script>

  <div class="w-full px-4 py-6 lg:px-8">
    <h1 class="mb-6 text-2xl font-bold tracking-tight">Dashboard Admin</h1>    <!-- Welcome Card for Admin -->
    <Card className="mb-6">
      <CardHeader>
        <CardTitle data-element-type="welcome-title">Selamat Datang, <span id="admin-name" class="text-blue-600 admin-name-span">Admin</span>!</CardTitle>
      </CardHeader>
      <CardContent>
        <div class="p-4 border border-blue-100 rounded-lg bg-blue-50">
          <h3 class="mb-2 text-lg font-medium text-blue-800">Sambutan untuk Admin Bersekolah</h3>
          <p class="text-blue-700">
            Selamat datang di Dashboard Admin Beasiswa Bersekolah! Dashboard ini menyediakan semua informasi dan alat yang diperlukan untuk mengelola program beasiswa dengan efektif.
            Pantau status pendaftaran, verifikasi dokumen, manajemen jadwal wawancara, dan pengumuman keputusan beasiswa di satu tempat.
          </p>
          <p class="mt-2 text-blue-700">
            Jika Anda membutuhkan bantuan lebih lanjut, silakan hubungi tim dukungan IT atau lihat video tutorial di bawah ini.
          </p>
        </div>
      </CardContent>
    </Card>
    
    <!-- Video Tutorial Section -->
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>Video Tutorial Admin</CardTitle>
      </CardHeader>
      <CardContent>
        <div class="grid gap-4 md:grid-cols-2">
          <!-- Video Tutorial 1 -->
          <div class="overflow-hidden border rounded-lg shadow-sm">
            <div class="bg-gray-100 aspect-video">
              <iframe 
                class="w-full h-full"
                src="https://www.youtube.com/embed/qU1I3_olv38"
                title="Tutorial Verifikasi Dokumen"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
              </iframe>
            </div>
            <div class="p-4">
              <h4 class="mb-1 font-medium">Tutorial Verifikasi Dokumen</h4>
              <p class="text-sm text-muted-foreground">Panduan lengkap untuk memverifikasi dokumen pendaftaran beasiswa.</p>
              <button 
                id="tutorial-1-button"
                class="w-full px-3 py-1 mt-2 text-sm font-medium text-gray-700 transition-colors bg-white border rounded-md hover:bg-gray-100"
                onclick="window.open('https://www.youtube.com/watch?v=qU1I3_olv38', '_blank')"
              >
                Buka di YouTube
              </button>
            </div>
          </div>
          
          <!-- Video Tutorial 2 -->
          <div class="overflow-hidden border rounded-lg shadow-sm">
            <div class="bg-gray-100 aspect-video">
              <iframe 
                class="w-full h-full"
                src="https://www.youtube.com/embed/LbmxCLpg3jU"
                title="Manajemen Jadwal Wawancara"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
              </iframe>
            </div>
            <div class="p-4">
              <h4 class="mb-1 font-medium">Manajemen Jadwal Wawancara</h4>
              <p class="text-sm text-muted-foreground">Cara mengatur jadwal wawancara dan mengirim notifikasi kepada calon penerima beasiswa.</p>
              <button 
                id="tutorial-2-button"
                class="w-full px-3 py-1 mt-2 text-sm font-medium text-gray-700 transition-colors bg-white border rounded-md hover:bg-gray-100"
                onclick="window.open('https://www.youtube.com/watch?v=LbmxCLpg3jU', '_blank')"
              >
                Buka di YouTube
              </button>
            </div>          </div>
        </div>
      </CardContent>
    </Card>
    
    <!-- Full-Width Stats Overview -->
    <div class="grid w-full grid-cols-1 gap-6 mb-6 sm:grid-cols-2 lg:grid-cols-3">
      <!-- Total Pendaftar -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Total Pendaftar</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /><circle cx="9" cy="7" r="4" /><path d="M22 21v-2a4 4 0 0 0-3-3.87" /><path d="M16 3.13a4 4 0 0 1 0 7.75" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-pendaftar">{dashboardStats.total_pendaftar || 0}</div>
              <p class="text-xs text-muted-foreground">Data terkini</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Total Mentor -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Total Mentor</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 bg-purple-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" /><circle cx="9" cy="7" r="4" /><path d="M23 21v-2a4 4 0 0 0-3-3.87" /><path d="M16 3.13a4 4 0 0 1 0 7.75" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-mentor">{dashboardStats.total_mentor || 0}</div>
              <p class="text-xs text-muted-foreground">Total mentor aktif</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Dokumen Terupload -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Dokumen Terupload</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 rounded-full bg-amber-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /><polyline points="14 2 14 8 20 8" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-dokumen">{dashboardStats.total_dokumen || 0}</div>
              <p class="text-xs text-muted-foreground">Dokumen terupload</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>

    <!-- Application Status Grid -->
    <div class="grid gap-6 mt-6 md:grid-cols-7">
      <!-- Application Status Grid -->
      <div class="md:col-span-12">
        <Card>
          <CardHeader>
            <CardTitle>Status Pendaftaran Beasiswa</CardTitle>
          </CardHeader>
          <CardContent>            <div class="grid grid-cols-3 gap-4 mb-6">
              <div class="p-4 text-center rounded-lg bg-yellow-50">
                <p class="mb-1 text-sm text-yellow-600">Menunggu</p>
                <p class="text-2xl font-bold text-yellow-600" id="app-pending">{applicationStats.pending || 0}</p>
              </div>
              <div class="p-4 text-center rounded-lg bg-green-50">
                <p class="mb-1 text-sm text-green-600">Diterima</p>
                <p class="text-2xl font-bold text-green-600" id="app-approved">{applicationStats.approved || 0}</p>
              </div>
              <div class="p-4 text-center rounded-lg bg-red-50">
                <p class="mb-1 text-sm text-red-600">Ditolak</p>
                <p class="text-2xl font-bold text-red-600" id="app-rejected">{applicationStats.rejected || 0}</p>
              </div>
            </div>
                      
          </CardContent>
        </Card>
      </div>      <!-- Quick Actions -->
      
    </div>
  </div>
</DashboardAdmin>

<!-- Legacy client-side script removed - data now fetched server-side -->

<script>  // Function to make authenticated API requests with detailed logging
  const fetchAPI = async (url: string) => {
    console.log(`[API] Fetching from ${url}`);
    
    const token = localStorage.getItem('bersekolah_auth_token');
    if (!token) {
      console.error('[API] No authentication token found');
      throw new Error('No authentication token');
    }
    
    const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
    const fullUrl = `${baseURL}${url}`;
    
    console.log(`[API] Full URL: ${fullUrl}`);
    
    try {
      console.time(`[API] ${url}`);
      const response = await fetch(fullUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      console.timeEnd(`[API] ${url}`);
      
      console.log(`[API] Status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Could not read error response');
        console.error(`[API] Error response: ${errorText}`);
        throw new Error(`API error: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      console.log(`[API] Success response from ${url}:`, data);
      return data;
    } catch (error) {
      console.error(`[API] Error fetching ${url}:`, error);
      throw error;
    }
  };  // Function to update element text safely
  const updateElementText = (id: string, value: unknown) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = typeof value === 'number' || typeof value === 'string' ? String(value) : 'N/A';
    } else {
      console.warn(`Element with id "${id}" not found`);
    }
  };
  // Function to check authentication status
  const checkAuth = () => {
    const token = localStorage.getItem('bersekolah_auth_token');
    if (!token) {
      console.log('No authentication token found, redirecting to login page');
      window.location.href = '/masuk?redirect=' + encodeURIComponent(window.location.pathname);
      return false;
    }
    return true;
  };  // Function to refresh dashboard data
  const refreshDashboardData = async () => {
    try {
      console.log('Refreshing dashboard data...');      // We'll use the consolidated stats endpoint for efficiency
      console.log('Fetching consolidated statistics');
      
      // Define the endpoints we need for complete dashboard
      const endpoints = [
        '/dashboard/consolidated-stats',        // Consolidated stats - includes all needed data
        '/applications/statistics',             // Fallback: Application status statistics (public endpoint)
        '/mentors/total',                       // Fallback: Total mentor count
        '/documents/statistics'                 // Fallback: Document statistics (public endpoint)
      ];
        // Fetch all endpoints in parallel
      const results = await Promise.allSettled(endpoints.map(endpoint => fetchAPI(endpoint)));
      
      console.log('All API requests completed:', results);
      
      // Extract results from the successful requests
      const successfulResponses: Record<string, any> = {};
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          const endpoint = endpoints[index];
          successfulResponses[endpoint] = result.value;
          console.log(`Success from ${endpoint}:`, result.value);
        } else {
          console.error(`Failed to fetch ${endpoints[index]}:`, result.reason);
        }
      });
      
      // Process and extract data from responses
      
      // 1. Process dashboard stats
      let dashboardStats = {
        total_pendaftar: 0,
        total_mentor: 0,
        total_dokumen: 0,
        dokumen_terverifikasi: 0
      };

      // 2. Process application statistics
      let appStats = {
        total: 0,
        pending: 0,
        approved: 0,
        rejected: 0
      };      // Try to use consolidated stats endpoint first, but don't rely exclusively on it
      let consolidatedSuccess = false;
      
      if (successfulResponses['/dashboard/consolidated-stats']) {
        const consolidatedData = successfulResponses['/dashboard/consolidated-stats'];
        console.log('Processing consolidated stats data:', consolidatedData);

        try {
          if (consolidatedData.success && consolidatedData.data) {
            const data = consolidatedData.data;
            
            // Extract dashboard stats
            if (data.dashboard) {
              console.log('Processing consolidated dashboard stats:', data.dashboard);
              dashboardStats.total_pendaftar = data.dashboard.total_pendaftar || 0;
              dashboardStats.total_mentor = data.dashboard.total_mentor || 0;
              dashboardStats.total_dokumen = data.dashboard.total_dokumen || 0;
              dashboardStats.dokumen_terverifikasi = data.dashboard.dokumen_terverifikasi || 0;
            }
            
            // Extract application stats
            if (data.applications) {
              console.log('Processing consolidated application stats:', data.applications);
              appStats.total = data.applications.total || 0;
              appStats.pending = data.applications.pending || 0;
              appStats.approved = data.applications.diterima || 0;
              appStats.rejected = data.applications.ditolak || 0;
            }

            consolidatedSuccess = true;
            console.log('Successfully processed consolidated stats');
          }
        } catch (e) {
          console.error('Error processing consolidated stats:', e);
          // Will continue with individual endpoints
        }
      }
      
      // We'll continue to process the individual endpoints even if consolidated was successful,
      // but will only use their values if we're missing something from consolidated stats
      // This gives us the most robust solution
      
      // FALLBACK: Process individual endpoints if consolidated endpoint failed
      console.warn('Consolidated stats endpoint failed or returned incomplete data. Using fallback endpoints...');
      
      // Extract quick actions data if available
      if (successfulResponses['/dashboard/quick-actions']) {
        const quickActions = successfulResponses['/dashboard/quick-actions'];
        console.log('Processing quick-actions data:', quickActions);
        
        // Extract values from quick actions endpoint
        dashboardStats.total_pendaftar = quickActions.total_pendaftar || 0;
        dashboardStats.total_mentor = quickActions.total_mentor || 0;
        dashboardStats.total_dokumen = quickActions.total_dokumen || 0;
      }
      
      // Process mentor count
      if (successfulResponses['/mentors/total']) {
        const mentorsData = successfulResponses['/mentors/total'];
        console.log('Processing mentors data:', mentorsData);
        
        // Check different response formats
        if (mentorsData.data && typeof mentorsData.data.total === 'number') {
          dashboardStats.total_mentor = mentorsData.data.total;
        } else if (typeof mentorsData.total === 'number') {
          dashboardStats.total_mentor = mentorsData.total;
        } else if (typeof mentorsData === 'number') {
          dashboardStats.total_mentor = mentorsData;
        }
        
        console.log('Extracted mentor count:', dashboardStats.total_mentor);
      }
        // Process document statistics
      if (successfulResponses['/documents/statistics']) {
        const documentsData = successfulResponses['/documents/statistics'];
        console.log('Processing document statistics:', documentsData);
        
        // Check different response formats
        if (documentsData.data) {
          // Controller returns { data: { total: X } } or { data: { total_documents: X } }
          dashboardStats.total_dokumen = documentsData.data.total || documentsData.data.total_documents || dashboardStats.total_dokumen;
          dashboardStats.dokumen_terverifikasi = documentsData.data.verified || 0;
        } else if (documentsData.total_documents) {
          // Direct response { total_documents: X }
          dashboardStats.total_dokumen = documentsData.total_documents;
        } else if (documentsData.total) {
          // Direct response { total: X }
          dashboardStats.total_dokumen = documentsData.total;
        }
        
        console.log('Extracted document count:', dashboardStats.total_dokumen);
      }
        // Process application statistics
      if (successfulResponses['/applications/statistics']) {
        const applicationsData = successfulResponses['/applications/statistics'];
        console.log('Processing applications statistics:', applicationsData);
        
        // Diagnostic: Log the raw response for easier debugging
        console.group('DIAGNOSTIC - Raw Application Stats Response:');
        console.log(JSON.stringify(applicationsData, null, 2));
        console.groupEnd();
        
        // Detailed logging of response structure to help with debugging
        console.group('Response Structure Analysis:');
        if (applicationsData) {
          console.log('Top level keys:', Object.keys(applicationsData));
          
          if (applicationsData.data) {
            console.log('data object keys:', Object.keys(applicationsData.data));
            
            if (applicationsData.data.overview) {
              console.log('overview object keys:', Object.keys(applicationsData.data.overview));
              console.log('overview values:', applicationsData.data.overview);
            }
          }
          
          // Log all possible status fields at any level
          const statusFields = ['diterima', 'ditolak', 'approved', 'rejected', 'pending', 'total'];
          console.group('Searching for status fields in response:');
          statusFields.forEach(field => {
            if (applicationsData[field] !== undefined) {
              console.log(`Found direct ${field}:`, applicationsData[field]);
            }
            if (applicationsData.data && applicationsData.data[field] !== undefined) {
              console.log(`Found in data.${field}:`, applicationsData.data[field]);
            }
            if (applicationsData.data && applicationsData.data.overview && applicationsData.data.overview[field] !== undefined) {
              console.log(`Found in data.overview.${field}:`, applicationsData.data.overview[field]);
            }
          });
          console.groupEnd();
        }
        console.groupEnd();
        
        // Process application statistics based on different response formats
        if (applicationsData && applicationsData.data && applicationsData.data.overview) {
          // Format from AdminBeasiswaApplicationController
          const overview = applicationsData.data.overview;
          console.log('Application overview data:', overview);
          
          // Using AdminBeasiswaApplicationController field names
          appStats = {
            total: overview.total || 0,
            pending: overview.pending || 0,
            approved: overview.diterima || 0,
            rejected: overview.ditolak || 0
          };
          
          // Update total pendaftar from app stats if needed
          if (!dashboardStats.total_pendaftar && appStats.total) {
            dashboardStats.total_pendaftar = appStats.total;
          }
          
          console.log('Extracted from AdminBeasiswaApplicationController format:', appStats);
        } else if (applicationsData && applicationsData.total !== undefined) {
          // Format from DashboardController
          appStats = {
            total: applicationsData.total || 0,
            pending: applicationsData.pending || 0,
            approved: applicationsData.approved || applicationsData.diterima || 0,
            rejected: applicationsData.rejected || applicationsData.ditolak || 0
          };
          
          // Update total pendaftar from app stats if needed
          if (!dashboardStats.total_pendaftar && appStats.total) {
            dashboardStats.total_pendaftar = appStats.total;
          }
          
          console.log('Extracted from DashboardController format:', appStats);
        } else {
          console.warn('Could not extract application stats from response');
          
          // Try to find any fields that might contain status counts
          if (applicationsData && typeof applicationsData === 'object') {
            console.log('Attempting to find status fields in response:');
            const possibleFields = [
              'total', 'pending', 'approved', 'rejected', 
              'diterima', 'ditolak', 'lolos_berkas', 'lolos_wawancara'
            ];
            
            for (const field of possibleFields) {
              if (applicationsData[field] !== undefined) {
                console.log(`Found field "${field}":`, applicationsData[field]);
                
                // Map to our stats object
                if (field === 'total') appStats.total = applicationsData[field];
                if (field === 'pending') appStats.pending = applicationsData[field];
                if (field === 'approved' || field === 'diterima') appStats.approved = applicationsData[field];
                if (field === 'rejected' || field === 'ditolak') appStats.rejected = applicationsData[field];
              }
              
              // Also check if nested in data property
              if (applicationsData.data && applicationsData.data[field] !== undefined) {
                console.log(`Found nested field "data.${field}":`, applicationsData.data[field]);
                
                // Map to our stats object
                if (field === 'total') appStats.total = applicationsData.data[field];
                if (field === 'pending') appStats.pending = applicationsData.data[field];
                if (field === 'approved' || field === 'diterima') appStats.approved = applicationsData.data[field];
                if (field === 'rejected' || field === 'ditolak') appStats.rejected = applicationsData.data[field];
              }
            }
          }
        }
        
        console.log('Final application stats to display:', appStats);
      }
        // Update the UI with best available statistics from all sources
      console.log('Final dashboard stats to display:', dashboardStats);
      console.log('Final application stats to display:', appStats);
      
      // If we still have empty values, try to infer them from other stats
      if (dashboardStats.total_pendaftar === 0 && appStats.total > 0) {
        dashboardStats.total_pendaftar = appStats.total;
      }
      
      // If there's no total but we have individual status counts, calculate the total
      if (appStats.total === 0 && (appStats.pending > 0 || appStats.approved > 0 || appStats.rejected > 0)) {
        appStats.total = appStats.pending + appStats.approved + appStats.rejected;
      }
      
      // Update the UI with our best available data
      updateElementText('total-pendaftar', dashboardStats.total_pendaftar);
      updateElementText('total-mentor', dashboardStats.total_mentor);
      updateElementText('total-dokumen', dashboardStats.total_dokumen);
      updateElementText('app-pending', appStats.pending);
      updateElementText('app-approved', appStats.approved);
      updateElementText('app-rejected', appStats.rejected);      } catch (err) {
      const error = err as Error;
      console.error('Error refreshing dashboard data:', error);
      
      // Show error in UI
      const errorElements = ['total-pendaftar', 'total-mentor', 'total-dokumen', 'app-pending', 'app-approved', 'app-rejected'];
      errorElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          element.innerHTML = '<span class="text-red-500">Error</span>';
        }
      });
        // Show error in console with details
      console.group('API Error Details');
      if (error instanceof Error) {
        console.error('Message:', error.message);
        console.error('Stack:', error.stack);
      } else {
        console.error('Unknown error:', error);      }
      console.groupEnd();
    }
  };  
  
  // Function to get user profile data
  const fetchUserProfile = async () => {
    try {
      console.log('Fetching user profile data...');
      
      // Helper function to find admin name element using multiple strategies
      const findAdminNameElement = () => {
        // Strategy 1: Direct ID lookup
        let el = document.getElementById('admin-name');
        if (el) {
          console.log('Found admin-name element by ID');
          return el;
        }
        
        // Strategy 2: Class lookup
        el = document.querySelector('.admin-name-span');
        if (el) {
          console.log('Found admin-name element by class');
          return el;
        }
        
        // Strategy 3: Attribute lookup
        el = document.querySelector('[data-element-type="welcome-title"] span');
        if (el) {
          console.log('Found admin-name element by attribute');
          return el;
        }
        
        // Strategy 4: Context-based lookup
        const titles = document.querySelectorAll('.CardTitle, h1, h2, h3, h4');
        for (const title of titles) {
          if (title.textContent && title.textContent.includes('Selamat Datang')) {
            const span = title.querySelector('span');
            if (span) {
              console.log('Found admin-name element by context');
              return span;
            }
          }
        }
        
        console.warn('Admin name element not found with any strategy');
        return null;
      };
      
      // Find the admin name element
      let adminNameElement = findAdminNameElement();
      
      // Show loading indicator if element found
      if (adminNameElement) {
        adminNameElement.innerHTML = 'Admin <span class="text-xs text-blue-500">(memuat...)</span>';
      } else {
        console.warn('Element not found on first attempt, will retry after short delay');
        // Small delay to allow DOM to fully initialize
        await new Promise(resolve => setTimeout(resolve, 300));
        adminNameElement = findAdminNameElement();
      }

      const token = localStorage.getItem('bersekolah_auth_token');
      if (!token) throw new Error('No authentication token');

      const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
      console.log(`Fetching user data from ${baseURL}/user`);
      
      const response = await fetch(`${baseURL}/user`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });

      console.log('User API response status:', response.status);
      
      if (response.ok) {
        const user = await response.json();
        console.log('User data retrieved:', user);
          // Store name globally as a fallback
        if (user && user.name) {
          // Using a safer approach to store the name globally
          document.body.setAttribute('data-user-name', user.name);
          // @ts-ignore - Custom property for emergency fallbacks
          window.__adminUserName = user.name;
        }
          // Use a multi-strategy approach to update the name
        const updateName = (userName: string): boolean => {
          if (!userName) userName = 'Admin';
          
          // Try to find the element again
          const element = findAdminNameElement();
          
          if (element) {
            element.textContent = userName;
            console.log('Updated admin name to:', userName);
            return true;
          }
          
          // Try a more aggressive approach if element still not found
          const allSpans = document.querySelectorAll('span');
          for (const span of allSpans) {
            if (span.textContent && (
                span.textContent.includes('Admin') || 
                span.textContent.includes('memuat')
              )) {
              span.textContent = userName;
              console.log('Updated admin name via span search');
              return true;
            }
          }
          
          // Create a mutation observer as a last resort
          const observer = new MutationObserver((mutations, obs) => {
            const foundElement = findAdminNameElement();
            if (foundElement) {
              foundElement.textContent = userName;
              console.log('Updated admin name via mutation observer');
              obs.disconnect(); // Stop observing
            }
          });
          
          observer.observe(document.body, {
            childList: true,
            subtree: true,
            characterData: true
          });
          
          // Safety timeout
          setTimeout(() => observer.disconnect(), 5000);
          
          return false;
        };
        
        // Attempt to update the name
        const userName = user && user.name && user.name.trim() ? user.name : 'Admin';
        const updated = updateName(userName);
        
        if (!updated) {
          console.warn('Initial update failed, will try again after delay');
          setTimeout(() => updateName(userName), 500);
        }
      } else {
        console.error('Failed to fetch user data, status:', response.status);
      }    } catch (err) {
      const error = err as Error;
      console.error('Error fetching user profile:', error);
    }
  };

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Debug: Verify all expected DOM elements exist
    const requiredElements = [
      'total-pendaftar', 
      'total-mentor', 
      'total-dokumen', 
      'app-pending', 
      'app-approved', 
      'app-rejected',
      'admin-name'
    ];
    
    console.group('DOM Elements Check');
    let allElementsFound = true;
    requiredElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        console.log(`✅ Found element with id "${id}"`, element);
      } else {
        console.error(`❌ Missing element with id "${id}"`);
        allElementsFound = false;
      }
    });
    console.groupEnd();
      if (!allElementsFound) {
      console.error('Some required DOM elements are missing. Data display may be incomplete.');
    }
    
    // Function to directly set admin name with multiple DOM targeting strategies
    const initAdminName = async () => {
      console.log('Initializing admin name display...');
      
      try {
        const token = localStorage.getItem('bersekolah_auth_token');
        if (!token) return;
        
        const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
        const response = await fetch(`${baseURL}/user`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/json'
          }
        });
        
        if (response.ok) {
          const userData = await response.json();
          const userName = userData.name || 'Admin';
          console.log('Got user name for immediate display:', userName);
          
          // Try multiple strategies to update the admin name
          const strategies = [
            // Strategy 1: Direct ID lookup
            () => {
              const el = document.getElementById('admin-name');
              if (el) {
                el.textContent = userName;
                return true;
              }
              return false;
            },
            // Strategy 2: Class lookup
            () => {
              const el = document.querySelector('.admin-name-span');
              if (el) {
                el.textContent = userName;
                return true;
              }
              return false;
            },
            // Strategy 3: Find by attribute and context
            () => {
              const title = document.querySelector('[data-element-type="welcome-title"]');
              if (title) {
                const span = title.querySelector('span');
                if (span) {
                  span.textContent = userName;
                  return true;
                }
              }
              return false;
            },
            // Strategy 4: Find any span containing "Admin" in titles
            () => {
              const titles = document.querySelectorAll('h1, h2, h3, h4, [class*="title"], [class*="Title"]');
              for (const title of titles) {
                if (title.textContent && title.textContent.includes('Selamat Datang')) {
                  const spans = title.querySelectorAll('span');
                  for (const span of spans) {
                    if (span.textContent && (span.textContent.includes('Admin') || span.textContent.includes('memuat'))) {
                      span.textContent = userName;
                      return true;
                    }
                  }
                  // If no span, just replace the Admin text
                  if (title.textContent.includes('Admin')) {
                    title.innerHTML = title.innerHTML.replace('Admin', userName);
                    return true;
                  }
                }
              }
              return false;
            }
          ];
          
          // Try each strategy until one succeeds
          let success = false;
          for (let i = 0; i < strategies.length && !success; i++) {
            success = strategies[i]();
            if (success) {
              console.log(`Admin name updated successfully using strategy ${i+1}`);
            }
          }
          
          if (!success) {
            console.warn('All admin name update strategies failed');
          }
        }      } catch (err) {
        const error = err as Error;
        console.error('Error in initAdminName:', error);
      }
    };

    if (checkAuth()) {
      console.log('Authentication successful, fetching data...');
      
      // Immediately try to update admin name
      initAdminName();
      
      // Skip directly to loading dashboard data since initAdminName already fetched the profile
      console.log('Now loading dashboard statistics...');
      refreshDashboardData();
    } else {
      console.error('Authentication failed - not fetching data');
    }
  });
</script>