---
import DashboardAdmin from "../../layout/dashboard-admin.astro";
import { Card, CardHeader, CardTitle, CardContent } from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import { DashboardService } from '../../lib/dashboard-service';

// Initialize default values
let dashboardStats = {
  total_pendaftar: 0,
  total_mentor: 0,
  total_beswan: 0,
  total_dokumen: 0,
  dokumen_terverifikasi: 0,
  konten_aktif: 0,
  user_aktif: 0
};

interface PeriodStat {
  period_name: string;
  count: number;
}

let applicationStats = {
  total: 0,
  pending: 0,
  approved: 0,
  rejected: 0,
  by_period: [] as PeriodStat[]
};

// In Astro SSR context, localStorage isn't available
// We'll rely on client-side fetching via the script tag

// Format dates for display
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('id-ID', { 
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};
---

<DashboardAdmin>
  <div class="w-full px-4 py-6 lg:px-8">
    <h1 class="mb-8 text-2xl font-bold tracking-tight">Dashboard Admin</h1>

    <!-- Full-Width Stats Overview -->
    <div class="grid w-full grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
      <!-- Total Pendaftar -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Total Pendaftar</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /><circle cx="9" cy="7" r="4" /><path d="M22 21v-2a4 4 0 0 0-3-3.87" /><path d="M16 3.13a4 4 0 0 1 0 7.75" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-pendaftar">{dashboardStats.total_pendaftar || 0}</div>
              <p class="text-xs text-muted-foreground">Data terkini</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Total Mentor -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Total Mentor</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 bg-purple-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" /><circle cx="9" cy="7" r="4" /><path d="M23 21v-2a4 4 0 0 0-3-3.87" /><path d="M16 3.13a4 4 0 0 1 0 7.75" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-mentor">{dashboardStats.total_mentor || 0}</div>
              <p class="text-xs text-muted-foreground">Total mentor aktif</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Dokumen Terupload -->
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-sm font-medium text-muted-foreground">Dokumen Terupload</CardTitle>
        </CardHeader>
        <CardContent>
          <div class="flex items-center">
            <div class="p-2 mr-4 rounded-full bg-amber-100">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /><polyline points="14 2 14 8 20 8" />
              </svg>
            </div>
            <div>
              <div class="text-3xl font-bold" id="total-dokumen">{dashboardStats.total_dokumen || 0}</div>
              <p class="text-xs text-muted-foreground">Dokumen terupload</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>

    <!-- Application Status Grid -->
    <div class="grid gap-6 mt-6 md:grid-cols-7">
      <!-- Application Status Grid -->
      <div class="md:col-span-12">
        <Card>
          <CardHeader>
            <CardTitle>Status Pendaftaran Beasiswa</CardTitle>
          </CardHeader>
          <CardContent>            <div class="grid grid-cols-3 gap-4 mb-6">
              <div class="p-4 text-center rounded-lg bg-yellow-50">
                <p class="mb-1 text-sm text-yellow-600">Menunggu</p>
                <p class="text-2xl font-bold text-yellow-600" id="app-pending">{applicationStats.pending || 0}</p>
              </div>
              <div class="p-4 text-center rounded-lg bg-green-50">
                <p class="mb-1 text-sm text-green-600">Diterima</p>
                <p class="text-2xl font-bold text-green-600" id="app-approved">{applicationStats.approved || 0}</p>
              </div>
              <div class="p-4 text-center rounded-lg bg-red-50">
                <p class="mb-1 text-sm text-red-600">Ditolak</p>
                <p class="text-2xl font-bold text-red-600" id="app-rejected">{applicationStats.rejected || 0}</p>
              </div>
            </div>

            <!-- Periode Stats -->
            <div>
              <h3 class="mb-2 text-sm font-medium">Pendaftar per Periode</h3>              <div id="periode-stats" class="space-y-3">
                {applicationStats.by_period && applicationStats.by_period.length > 0 
                  ? applicationStats.by_period.map((period) => (
                    <div class="flex items-center space-x-2">
                      <div class="flex-1">
                        <p class="mb-1 text-xs font-medium">{period.period_name}</p>
                        <div class="w-full h-2 overflow-hidden bg-gray-100 rounded-full">
                          <div class="h-full bg-blue-500" style={`width: ${Math.min(100, (period.count/Math.max(1, applicationStats.total || 1))*100)}%`}></div>
                        </div>
                      </div>
                      <span class="text-xs text-gray-600 min-w-[80px] text-right">{period.count} pendaftar</span>
                    </div>
                  ))
                  : <div class="flex items-center space-x-2">
                      <div class="w-full h-2 overflow-hidden bg-gray-100 rounded-full">
                        <div class="h-full bg-gray-300" style="width: 0%"></div>
                      </div>
                      <span class="text-xs text-gray-600 min-w-[80px] text-right">Tidak ada data</span>
                    </div>
                }
              </div>
              </div>
            </div>

            
          </CardContent>
        </Card>
      </div>      <!-- Quick Actions -->
      <div class="md:col-span-3">
        <Card>
          <CardHeader>
            <CardTitle>Panel Admin</CardTitle>
          </CardHeader>
          <CardContent>
            <div class="p-4 mb-6 rounded-lg bg-blue-50">
              <h3 class="mb-2 font-semibold text-blue-700 text-md">Selamat Datang di Panel Admin</h3>
              <p class="text-sm text-blue-600">Panel ini memberikan akses ke semua fungsionalitas manajemen konten dan beasiswa. Gunakan menu cepat di bawah untuk akses fungsi utama.</p>
            </div>            <div class="mt-6">
              <h4 class="mb-3 text-sm font-medium">Statistik Lainnya</h4>
              
              <div class="grid grid-cols-2 gap-3 mb-4">
                <div class="p-3 border border-green-100 rounded-lg bg-green-50">
                  <div class="flex items-center mb-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 text-green-600"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>
                    <span class="text-sm font-medium text-green-700">Dokumen Terverifikasi</span>
                  </div>
                  <p class="text-xl font-bold text-green-700">{dashboardStats.dokumen_terverifikasi || 0}</p>
                </div>
                <div class="p-3 border border-blue-100 rounded-lg bg-blue-50">
                  <div class="flex items-center mb-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 text-blue-600"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                    <span class="text-sm font-medium text-blue-700">Konten Aktif</span>
                  </div>
                  <p class="text-xl font-bold text-blue-700">{dashboardStats.konten_aktif || 0}</p>
                </div>
              </div>

              <h4 class="mb-2 text-sm font-medium">Aksi Cepat</h4>
              <div class="grid grid-cols-2 gap-2">
                <a href="/dashboard/data-pendaftar">
                  <Button variant="outline" className="w-full justify-start text-xs h-auto py-1.5" size="sm">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-3 h-3 mr-1"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                    Pendaftar
                  </Button>
                </a>
                <a href="/dashboard/content">
                  <Button variant="outline" className="w-full justify-start text-xs h-auto py-1.5" size="sm">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-3 h-3 mr-1"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                    Konten
                  </Button>
                </a>
                <a href="/dashboard/data-mentor">
                  <Button variant="outline" className="w-full justify-start text-xs h-auto py-1.5" size="sm">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-3 h-3 mr-1"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                    Mentor
                  </Button>
                </a>
                <a href="/dashboard/periode-beasiswa">
                  <Button variant="outline" className="w-full justify-start text-xs h-auto py-1.5" size="sm">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-3 h-3 mr-1"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect><line x1="16" x2="16" y1="2" y2="6"></line><line x1="8" x2="8" y1="2" y2="6"></line><line x1="3" x2="21" y1="10" y2="10"></line><path d="M8 14h.01"></path><path d="M12 14h.01"></path><path d="M16 14h.01"></path><path d="M8 18h.01"></path><path d="M12 18h.01"></path><path d="M16 18h.01"></path></svg>
                    Periode
                  </Button>
                </a>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  </div>
</DashboardAdmin>

<!-- Legacy client-side script removed - data now fetched server-side -->

<script>  // Function to make authenticated API requests with detailed logging
  const fetchAPI = async (url: string) => {
    console.log(`[API] Fetching from ${url}`);
    
    const token = localStorage.getItem('bersekolah_auth_token');
    if (!token) {
      console.error('[API] No authentication token found');
      throw new Error('No authentication token');
    }
    
    const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
    const fullUrl = `${baseURL}${url}`;
    
    console.log(`[API] Full URL: ${fullUrl}`);
    
    try {
      console.time(`[API] ${url}`);
      const response = await fetch(fullUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      console.timeEnd(`[API] ${url}`);
      
      console.log(`[API] Status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Could not read error response');
        console.error(`[API] Error response: ${errorText}`);
        throw new Error(`API error: ${response.status} - ${errorText}`);
      }
      
      const data = await response.json();
      console.log(`[API] Success response from ${url}:`, data);
      return data;
    } catch (error) {
      console.error(`[API] Error fetching ${url}:`, error);
      throw error;
    }
  };  // Function to update element text safely
  const updateElementText = (id: string, value: unknown) => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = typeof value === 'number' || typeof value === 'string' ? String(value) : 'N/A';
    } else {
      console.warn(`Element with id "${id}" not found`);
    }
  };
  // Function to check authentication status
  const checkAuth = () => {
    const token = localStorage.getItem('bersekolah_auth_token');
    if (!token) {
      console.log('No authentication token found, redirecting to login page');
      window.location.href = '/masuk?redirect=' + encodeURIComponent(window.location.pathname);
      return false;
    }
    return true;
  };  // Function to refresh dashboard data
  const refreshDashboardData = async () => {
    try {
      console.log('Refreshing dashboard data...');      // We'll use the consolidated stats endpoint for efficiency
      console.log('Fetching consolidated statistics');
      
      // Define the endpoints we need for complete dashboard
      const endpoints = [
        '/dashboard/consolidated-stats',        // Consolidated stats - includes all needed data
        '/applications/statistics',             // Fallback: Application status statistics (public endpoint)
        '/mentors/total',                       // Fallback: Total mentor count
        '/documents/statistics'                 // Fallback: Document statistics (public endpoint)
      ];
        // Fetch all endpoints in parallel
      const results = await Promise.allSettled(endpoints.map(endpoint => fetchAPI(endpoint)));
      
      console.log('All API requests completed:', results);
      
      // Extract results from the successful requests
      const successfulResponses: Record<string, any> = {};
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          const endpoint = endpoints[index];
          successfulResponses[endpoint] = result.value;
          console.log(`Success from ${endpoint}:`, result.value);
        } else {
          console.error(`Failed to fetch ${endpoints[index]}:`, result.reason);
        }
      });
      
      // Process and extract data from responses
      
      // 1. Process dashboard stats
      let dashboardStats = {
        total_pendaftar: 0,
        total_mentor: 0,
        total_dokumen: 0,
        dokumen_terverifikasi: 0
      };

      // 2. Process application statistics
      let appStats = {
        total: 0,
        pending: 0,
        approved: 0,
        rejected: 0
      };

      // Process consolidated stats endpoint if available (preferred method)
      if (successfulResponses['/dashboard/consolidated-stats']) {
        const consolidatedData = successfulResponses['/dashboard/consolidated-stats'];
        console.log('Processing consolidated stats data:', consolidatedData);

        if (consolidatedData.success && consolidatedData.data) {
          const data = consolidatedData.data;
          
          // Extract dashboard stats
          if (data.dashboard) {
            console.log('Processing consolidated dashboard stats:', data.dashboard);
            dashboardStats.total_pendaftar = data.dashboard.total_pendaftar || 0;
            dashboardStats.total_mentor = data.dashboard.total_mentor || 0;
            dashboardStats.total_dokumen = data.dashboard.total_dokumen || 0;
            dashboardStats.dokumen_terverifikasi = data.dashboard.dokumen_terverifikasi || 0;
          }
          
          // Extract application stats
          if (data.applications) {
            console.log('Processing consolidated application stats:', data.applications);
            appStats.total = data.applications.total || 0;
            appStats.pending = data.applications.pending || 0;
            appStats.approved = data.applications.diterima || 0;
            appStats.rejected = data.applications.ditolak || 0;
          }

          // No need to process fallback endpoints since we got everything we need
          console.log('Successfully processed consolidated stats');
          // Update UI directly
          updateElementText('total-pendaftar', dashboardStats.total_pendaftar);
          updateElementText('total-mentor', dashboardStats.total_mentor);
          updateElementText('total-dokumen', dashboardStats.total_dokumen);
          updateElementText('app-pending', appStats.pending);
          updateElementText('app-approved', appStats.approved);
          updateElementText('app-rejected', appStats.rejected);
          
          // Exit early since we got all the data we need
          return;
        }
      }
      
      // FALLBACK: Process individual endpoints if consolidated endpoint failed
      console.warn('Consolidated stats endpoint failed or returned incomplete data. Using fallback endpoints...');
      
      // Extract quick actions data if available
      if (successfulResponses['/dashboard/quick-actions']) {
        const quickActions = successfulResponses['/dashboard/quick-actions'];
        console.log('Processing quick-actions data:', quickActions);
        
        // Extract values from quick actions endpoint
        dashboardStats.total_pendaftar = quickActions.total_pendaftar || 0;
        dashboardStats.total_mentor = quickActions.total_mentor || 0;
        dashboardStats.total_dokumen = quickActions.total_dokumen || 0;
      }
      
      // Process mentor count
      if (successfulResponses['/mentors/total']) {
        const mentorsData = successfulResponses['/mentors/total'];
        console.log('Processing mentors data:', mentorsData);
        
        // Check different response formats
        if (mentorsData.data && typeof mentorsData.data.total === 'number') {
          dashboardStats.total_mentor = mentorsData.data.total;
        } else if (typeof mentorsData.total === 'number') {
          dashboardStats.total_mentor = mentorsData.total;
        } else if (typeof mentorsData === 'number') {
          dashboardStats.total_mentor = mentorsData;
        }
        
        console.log('Extracted mentor count:', dashboardStats.total_mentor);
      }
        // Process document statistics
      if (successfulResponses['/documents/statistics']) {
        const documentsData = successfulResponses['/documents/statistics'];
        console.log('Processing document statistics:', documentsData);
        
        // Check different response formats
        if (documentsData.data) {
          // Controller returns { data: { total: X } } or { data: { total_documents: X } }
          dashboardStats.total_dokumen = documentsData.data.total || documentsData.data.total_documents || dashboardStats.total_dokumen;
          dashboardStats.dokumen_terverifikasi = documentsData.data.verified || 0;
        } else if (documentsData.total_documents) {
          // Direct response { total_documents: X }
          dashboardStats.total_dokumen = documentsData.total_documents;
        } else if (documentsData.total) {
          // Direct response { total: X }
          dashboardStats.total_dokumen = documentsData.total;
        }
        
        console.log('Extracted document count:', dashboardStats.total_dokumen);
      }
        // Process application statistics
      if (successfulResponses['/applications/statistics']) {
        const applicationsData = successfulResponses['/applications/statistics'];
        console.log('Processing applications statistics:', applicationsData);
        
        // Diagnostic: Log the raw response for easier debugging
        console.group('DIAGNOSTIC - Raw Application Stats Response:');
        console.log(JSON.stringify(applicationsData, null, 2));
        console.groupEnd();
        
        // Detailed logging of response structure to help with debugging
        console.group('Response Structure Analysis:');
        if (applicationsData) {
          console.log('Top level keys:', Object.keys(applicationsData));
          
          if (applicationsData.data) {
            console.log('data object keys:', Object.keys(applicationsData.data));
            
            if (applicationsData.data.overview) {
              console.log('overview object keys:', Object.keys(applicationsData.data.overview));
              console.log('overview values:', applicationsData.data.overview);
            }
          }
          
          // Log all possible status fields at any level
          const statusFields = ['diterima', 'ditolak', 'approved', 'rejected', 'pending', 'total'];
          console.group('Searching for status fields in response:');
          statusFields.forEach(field => {
            if (applicationsData[field] !== undefined) {
              console.log(`Found direct ${field}:`, applicationsData[field]);
            }
            if (applicationsData.data && applicationsData.data[field] !== undefined) {
              console.log(`Found in data.${field}:`, applicationsData.data[field]);
            }
            if (applicationsData.data && applicationsData.data.overview && applicationsData.data.overview[field] !== undefined) {
              console.log(`Found in data.overview.${field}:`, applicationsData.data.overview[field]);
            }
          });
          console.groupEnd();
        }
        console.groupEnd();
        
        // Process application statistics based on different response formats
        if (applicationsData && applicationsData.data && applicationsData.data.overview) {
          // Format from AdminBeasiswaApplicationController
          const overview = applicationsData.data.overview;
          console.log('Application overview data:', overview);
          
          // Using AdminBeasiswaApplicationController field names
          appStats = {
            total: overview.total || 0,
            pending: overview.pending || 0,
            approved: overview.diterima || 0,
            rejected: overview.ditolak || 0
          };
          
          // Update total pendaftar from app stats if needed
          if (!dashboardStats.total_pendaftar && appStats.total) {
            dashboardStats.total_pendaftar = appStats.total;
          }
          
          console.log('Extracted from AdminBeasiswaApplicationController format:', appStats);
        } else if (applicationsData && applicationsData.total !== undefined) {
          // Format from DashboardController
          appStats = {
            total: applicationsData.total || 0,
            pending: applicationsData.pending || 0,
            approved: applicationsData.approved || applicationsData.diterima || 0,
            rejected: applicationsData.rejected || applicationsData.ditolak || 0
          };
          
          // Update total pendaftar from app stats if needed
          if (!dashboardStats.total_pendaftar && appStats.total) {
            dashboardStats.total_pendaftar = appStats.total;
          }
          
          console.log('Extracted from DashboardController format:', appStats);
        } else {
          console.warn('Could not extract application stats from response');
          
          // Try to find any fields that might contain status counts
          if (applicationsData && typeof applicationsData === 'object') {
            console.log('Attempting to find status fields in response:');
            const possibleFields = [
              'total', 'pending', 'approved', 'rejected', 
              'diterima', 'ditolak', 'lolos_berkas', 'lolos_wawancara'
            ];
            
            for (const field of possibleFields) {
              if (applicationsData[field] !== undefined) {
                console.log(`Found field "${field}":`, applicationsData[field]);
                
                // Map to our stats object
                if (field === 'total') appStats.total = applicationsData[field];
                if (field === 'pending') appStats.pending = applicationsData[field];
                if (field === 'approved' || field === 'diterima') appStats.approved = applicationsData[field];
                if (field === 'rejected' || field === 'ditolak') appStats.rejected = applicationsData[field];
              }
              
              // Also check if nested in data property
              if (applicationsData.data && applicationsData.data[field] !== undefined) {
                console.log(`Found nested field "data.${field}":`, applicationsData.data[field]);
                
                // Map to our stats object
                if (field === 'total') appStats.total = applicationsData.data[field];
                if (field === 'pending') appStats.pending = applicationsData.data[field];
                if (field === 'approved' || field === 'diterima') appStats.approved = applicationsData.data[field];
                if (field === 'rejected' || field === 'ditolak') appStats.rejected = applicationsData.data[field];
              }
            }
          }
        }
        
        console.log('Final application stats to display:', appStats);
      }
      
      // Update the UI with all collected statistics
      console.log('Updating UI with dashboard stats:', dashboardStats);
      updateElementText('total-pendaftar', dashboardStats.total_pendaftar);
      updateElementText('total-mentor', dashboardStats.total_mentor);
      updateElementText('total-dokumen', dashboardStats.total_dokumen);      console.log('Updating UI with application stats:', appStats);
      updateElementText('app-pending', appStats.pending);
      updateElementText('app-approved', appStats.approved);
      updateElementText('app-rejected', appStats.rejected);    
    } catch (error) {
      console.error('Error refreshing dashboard data:', error);
      
      // Show error in UI
      const errorElements = ['total-pendaftar', 'total-mentor', 'total-dokumen', 'app-pending', 'app-approved', 'app-rejected'];
      errorElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          element.innerHTML = '<span class="text-red-500">Error</span>';
        }
      });
        // Show error in console with details
      console.group('API Error Details');
      if (error instanceof Error) {
        console.error('Message:', error.message);
        console.error('Stack:', error.stack);
      } else {
        console.error('Unknown error:', error);
      }
      console.groupEnd();
    }
  };
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Debug: Verify all expected DOM elements exist
    const requiredElements = [
      'total-pendaftar', 
      'total-mentor', 
      'total-dokumen', 
      'app-pending', 
      'app-approved', 
      'app-rejected'
    ];
    
    console.group('DOM Elements Check');
    let allElementsFound = true;
    requiredElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        console.log(`✅ Found element with id "${id}"`, element);
      } else {
        console.error(`❌ Missing element with id "${id}"`);
        allElementsFound = false;
      }
    });
    console.groupEnd();
    
    if (!allElementsFound) {
      console.error('Some required DOM elements are missing. Data display may be incomplete.');
    }

    if (checkAuth()) {
      console.log('Authentication successful, fetching dashboard data...');
      // Refresh data when page loads to ensure latest stats
      refreshDashboardData();
    } else {
      console.error('Authentication failed - not fetching data');
    }
  });
</script>