---
import DashboardAdmin from "@/layout/dashboard-admin.astro";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// These are just placeholder types and functions that will be replaced by client-side logic
type Status = "pending" | "lolos_berkas" | "lolos_wawancara" | "diterima" | "ditolak";

// Initial empty array - will be populated by client-side script
const applicants = [];

const getStatusColor = (status: Status) => {
  const colors: Record<Status, string> = {
    "pending": "bg-yellow-100 text-yellow-800",
    "lolos_berkas": "bg-blue-100 text-blue-800",
    "lolos_wawancara": "bg-purple-100 text-purple-800",
    "diterima": "bg-green-100 text-green-800",
    "ditolak": "bg-red-100 text-red-800",
  };
  return colors[status] || "bg-gray-100 text-gray-800";
};

const getStatusText = (status: Status) => {
  const labels: Record<Status, string> = {
    "pending": "Menunggu",
    "lolos_berkas": "Lolos Berkas",
    "lolos_wawancara": "Lolos Wawancara",
    "diterima": "Diterima",
    "ditolak": "Ditolak",
  };
  return labels[status] || status;
};
---

<DashboardAdmin>
  <div class="container py-6 mx-auto">    <div class="mb-6">
      <h1 class="text-2xl font-bold tracking-tight">Data Beswan</h1>
      <p class="text-muted-foreground">
        Berikut daftar beswan yang terdaftar dalam program beasiswa.
      </p>
    </div>    <Card className="mb-6">  <CardContent>
    <div class="grid w-full grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3">
      <!-- Total Beswan -->
      <Card className="w-full">
        <CardContent className="p-4">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-sm font-medium text-muted-foreground">Total Beswan</h3>
              <p id="total-beswan" class="text-2xl font-bold">0</p>
            </div>
            <div class="p-2 bg-blue-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Total Dokumen -->
      <Card className="w-full">
        <CardContent className="p-4">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-sm font-medium text-muted-foreground">Total Dokumen</h3>
              <p id="total-documents" class="text-2xl font-bold">0</p>
            </div>
            <div class="p-2 bg-green-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Beswan Diterima -->
      <Card className="w-full">
        <CardContent className="p-4">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-sm font-medium text-muted-foreground">Beswan Diterima</h3>
              <p id="total-diterima" class="text-2xl font-bold">0</p>
            </div>
            <div class="p-2 bg-green-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  </CardContent>
</Card>

    
    <Card>
      <CardContent>        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold">Daftar Beswan</h3>
          <button id="refresh-beswan-btn" class="flex items-center px-3 py-1 text-sm text-blue-700 border border-blue-300 rounded bg-blue-50 hover:bg-blue-100">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Refresh
          </button>
        </div>
        <div class="relative overflow-x-auto">
          <Table>            <TableHeader>
              <TableRow>
                <TableHead>ID</TableHead>
                <TableHead>Nama</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Phone</TableHead>
                <TableHead>Tanggal Registrasi</TableHead>
                <TableHead>Aksi</TableHead>
              </TableRow>
            </TableHeader><TableBody id="applicants-table">              <TableRow>
                <TableCell colSpan={6} className="text-center py-10 text-muted-foreground">
                  Memuat data beswan...
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  </div>
</DashboardAdmin>

<script>
  import { DashboardService } from '@/lib/dashboard-service';
  // Function to format dates
  const formatDate = (dateString: string | null | undefined): string => {
    if (!dateString) return "-";
    
    try {
      return new Date(dateString).toLocaleDateString('id-ID', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    } catch (error) {
      console.error(`Error formatting date: ${dateString}`, error);
      return "-";
    }
  };

  // Function to get translated status
  const getStatusText = (status: string): string => {
    const labels: Record<string, string> = {
      "pending": "Menunggu",
      "lolos_berkas": "Lolos Berkas",
      "lolos_wawancara": "Lolos Wawancara",
      "diterima": "Diterima",
      "ditolak": "Ditolak",
    };
    return labels[status] || status;
  };

  // Function to get status badge color
  const getStatusColor = (status: string): string => {
    const colors: Record<string, string> = {
      "pending": "bg-yellow-100 text-yellow-800",
      "lolos_berkas": "bg-blue-100 text-blue-800",
      "lolos_wawancara": "bg-purple-100 text-purple-800",
      "diterima": "bg-green-100 text-green-800",
      "ditolak": "bg-red-100 text-red-800",
    };
    return colors[status] || "bg-gray-100 text-gray-800";
  };
  
  // Function to update element text safely
  const updateElementText = (id: string, value: unknown): void => {
    const element = document.getElementById(id);
    if (element) {
      element.textContent = typeof value === 'number' || typeof value === 'string' 
        ? String(value) 
        : '0';
    } else {
      console.warn(`Element with id "${id}" not found`);
    }
  };    // Function to get auth token
  const getAuthToken = () => {
    return localStorage.getItem('bersekolah_auth_token');
  };  // Function to fetch and display beswan data
  const fetchApplicants = async () => {
    const tableBody = document.getElementById('applicants-table');
    if (!tableBody) {
      console.error('Table body element not found');
      return;
    }
    
    // Show loading state
    tableBody.innerHTML = `
      <tr>
        <td colspan="6" class="py-10 text-center">
          <div class="flex items-center justify-center">
            <svg class="w-6 h-6 mr-3 text-blue-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span>Memuat data beswan...</span>
          </div>
        </td>
      </tr>
    `;
    
    try {
      console.log('Fetching beswan data...');
      const response = await fetchAPI('/beswan');
      
      console.log('Response:', response);
      
      if (response && response.status === 'success' && Array.isArray(response.data)) {
        const beswanList = response.data;
        console.log(`Found ${beswanList.length} beswan records`);
        
        // Clear table
        tableBody.innerHTML = '';
        
        if (beswanList.length === 0) {
          tableBody.innerHTML = `
            <tr>
              <td colspan="6" class="py-10 text-center text-muted-foreground">
                Tidak ada data beswan ditemukan
              </td>
            </tr>
          `;
          return;
        }          // Add data to table
        beswanList.forEach((beswan: any) => {
          const row = document.createElement('tr');
          row.className = 'hover:bg-gray-50';
          
          row.innerHTML = `
            <td class="px-4 py-2 text-sm">${beswan.id}</td>
            <td class="px-4 py-2 text-sm font-medium">${beswan.nama || 'Unknown'}</td>
            <td class="px-4 py-2 text-sm">${beswan.email || '-'}</td>
            <td class="px-4 py-2 text-sm">${beswan.phone || '-'}</td>
            <td class="px-4 py-2 text-sm">${formatDate(beswan.created_at)}</td>
            <td class="px-4 py-2 text-sm">
              <a href="/dashboard/beswan/${beswan.id}" class="text-blue-600 hover:underline">
                Detail
              </a>
            </td>
          `;
          
          tableBody.appendChild(row);
        });
        
        console.log('Successfully rendered beswan table');
        
      } else {
        throw new Error('Invalid response format');
      }
        } catch (error: any) {
      console.error('Error fetching beswan data:', error);
      
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="py-10 text-center text-red-500">
            Gagal memuat data beswan: ${error?.message || 'Unknown error'}
            <br><small class="text-gray-500">Periksa console untuk detail lebih lanjut</small>
            <button id="retry-fetch-button" class="ml-2 text-blue-500 hover:underline">Coba lagi</button>
          </td>
        </tr>
      `;
      
      // Add retry functionality
      setTimeout(() => {
        const retryButton = document.getElementById('retry-fetch-button');
        if (retryButton) {
          retryButton.addEventListener('click', fetchApplicants);
        }
      }, 100);
    }
  };
  // Function to make API request with auth and detailed logging
  const fetchAPI = async (url: string) => {
    console.log(`[API] Fetching from ${url}`);
    
    const token = getAuthToken();
    if (!token) {
      console.error('[API] No authentication token found');
      throw new Error('No authentication token');
    }
    
    // Ensure the URL is properly formatted (doesn't have double slashes)
    const urlPath = url.startsWith('/') ? url : `/${url}`;
    
    // Use environment variable for API URL or fall back to localhost
    const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
    const fullUrl = `${baseURL}${urlPath}`;
    
    console.log(`[API] Full URL: ${fullUrl}`);
    
    try {
      console.time(`[API] ${url}`);
      const response = await fetch(fullUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      console.timeEnd(`[API] ${url}`);
      
      console.log(`[API] Status: ${response.status} ${response.statusText}`);
      
      // Handle HTTP error responses
      if (!response.ok) {
        let errorMessage = `API error: ${response.status} ${response.statusText}`;
        
        try {
          // Try to parse error response as JSON
          const errorData = await response.json();
          if (errorData.message) {
            errorMessage = `${errorMessage} - ${errorData.message}`;
          }
          console.error(`[API] Error response:`, errorData);
        } catch (jsonError) {
          // If not JSON, try to get as text
          const errorText = await response.text().catch(() => 'Could not read error response');
          errorMessage = `${errorMessage} - ${errorText}`;
          console.error(`[API] Error response text:`, errorText);
        }
        
        throw new Error(errorMessage);
      }
      
      const data = await response.json();
      console.log(`[API] Success response from ${url}:`, data);
      return data;
    } catch (error) {
      console.error(`[API] Error fetching ${url}:`, error);
      throw error;
    }
  };
  // Function to fetch dashboard stats directly from API endpoints
  const fetchDashboardStats = async () => {
    try {
      console.log('Fetching dashboard stats...');
      
      // Try the new beswan/count endpoint first
      try {
        console.log('Fetching beswan count data...');
        const beswanCountResponse = await fetchAPI('/beswan/count');
        
        if (beswanCountResponse && beswanCountResponse.data) {
          console.log('Successfully fetched beswan count data:', beswanCountResponse);
          const data = beswanCountResponse.data;
          
          // Update the dashboard stats with the beswan count data
          updateElementText('total-beswan', data.total_beswan || 0);
          updateElementText('total-documents', data.total_documents || 0);
          updateElementText('total-diterima', data.total_diterima || 0);
          
          // No need for fallback if beswan/count endpoint succeeds
          return;
        }
      } catch (beswanCountError) {
        console.warn('Beswan count endpoint failed, using fallback endpoints:', beswanCountError);
      }
      
      // Try consolidated endpoint as fallback
      try {
        console.log('Fetching consolidated stats as fallback...');
        const consolidatedResponse = await fetchAPI('/dashboard/consolidated-stats');
        
        if (consolidatedResponse && consolidatedResponse.data) {
          console.log('Successfully fetched consolidated stats:', consolidatedResponse);
          const data = consolidatedResponse.data;
          
          // Extract dashboard stats
          if (data.dashboard) {
            updateElementText('total-beswan', data.dashboard.total_pendaftar || 0);
            updateElementText('total-documents', data.dashboard.total_dokumen || 0);
          }
          
          // Extract application stats
          if (data.applications) {
            updateElementText('total-diterima', data.applications.diterima || 0);
          }
          
          // No need for further fallback if consolidated endpoint succeeds
          return;
        }
      } catch (consolidatedError) {
        console.warn('Consolidated stats failed, using individual fallback endpoints:', consolidatedError);
      }
      
      // FALLBACK: Individual endpoints if both primary methods fail
      console.log('Using individual fallback endpoints...');
      
      // 1. Fetch document statistics
      const documentsResponse = await fetchAPI('/documents/statistics');
      let documentCount = 0;
      if (documentsResponse?.data?.total_documents) {
        documentCount = documentsResponse.data.total_documents;
      } else if (documentsResponse?.data?.total) {
        documentCount = documentsResponse.data.total;
      } else if (documentsResponse?.total_documents) {
        documentCount = documentsResponse.total_documents;
      } else if (documentsResponse?.total) {
        documentCount = documentsResponse.total;
      }
      updateElementText('total-documents', documentCount);
      
      // 2. Fetch applications statistics
      const applicationsResponse = await fetchAPI('/applications/statistics');
      let totalBeswan = 0;
      let acceptedBeswan = 0;
      
      // Try different response formats
      if (applicationsResponse?.data?.overview) {
        totalBeswan = applicationsResponse.data.overview.total || 0;
        acceptedBeswan = applicationsResponse.data.overview.diterima || 0;
      } else if (applicationsResponse?.total) {
        totalBeswan = applicationsResponse.total;
        acceptedBeswan = applicationsResponse.diterima || applicationsResponse.approved || 0;
      } else {
        // Try to find fields directly in the response
        const possibleTotalFields = ['total', 'total_applications'];
        const possibleAcceptedFields = ['diterima', 'approved', 'total_accepted'];
        
        for (const field of possibleTotalFields) {
          if (applicationsResponse && applicationsResponse[field] !== undefined) {
            totalBeswan = applicationsResponse[field];
            break;
          }
        }
        
        for (const field of possibleAcceptedFields) {
          if (applicationsResponse && applicationsResponse[field] !== undefined) {
            acceptedBeswan = applicationsResponse[field];
            break;
          }
        }
      }
      
      updateElementText('total-beswan', totalBeswan);
      updateElementText('total-diterima', acceptedBeswan);    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
      // Set default values if API calls fail
      updateElementText('total-beswan', 0);
      updateElementText('total-documents', 0);
      updateElementText('total-diterima', 0);
      
      // Show error message in console for debugging
      console.group('API Error Details for /beswan/count');
      if (error instanceof Error) {
        console.error('Message:', error.message);
        console.error('Stack:', error.stack);
      } else {
        console.error('Unknown error:', error);
      }
      console.groupEnd();
    }
  };  // Function to test API response and log it
  const testAPIResponse = async () => {
    console.group('[API TEST] Testing beswan API response');
    
    try {
      const token = getAuthToken();
      console.log('[API TEST] Auth token available:', !!token);
      
      if (!token) {
        console.error('[API TEST] No auth token found');
        return;
      }
      
      // Test the base URL construction
      const baseURL = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000/api';
      console.log('[API TEST] Base URL:', baseURL);
      
      // Test /beswan endpoint
      const beswanUrl = `${baseURL}/beswan`;
      console.log('[API TEST] Full beswan URL:', beswanUrl);
      
      const response = await fetch(beswanUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      
      console.log('[API TEST] Response status:', response.status);
      console.log('[API TEST] Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (response.ok) {
        const data = await response.json();
        console.log('[API TEST] Raw response data:', data);
        console.log('[API TEST] Response type:', typeof data);
        console.log('[API TEST] Is array?', Array.isArray(data));
        
        if (data && typeof data === 'object') {
          console.log('[API TEST] Response keys:', Object.keys(data));
          
          // Check if data has nested structure
          Object.keys(data).forEach(key => {
            const value = data[key];
            console.log(`[API TEST] ${key}:`, typeof value, Array.isArray(value) ? `array[${value.length}]` : value);
          });
          
          // If data.data exists, examine it
          if (data.data) {
            console.log('[API TEST] data.data type:', typeof data.data);
            console.log('[API TEST] data.data is array?', Array.isArray(data.data));
            if (Array.isArray(data.data) && data.data.length > 0) {
              console.log('[API TEST] First item in data.data:', data.data[0]);
            }
          }
        }
      } else {
        const errorText = await response.text();
        console.error('[API TEST] Error response:', errorText);
      }
      
    } catch (error) {
      console.error('[API TEST] Fetch error:', error);
    }
    
    console.groupEnd();
  };

  // This function has been moved above to avoid duplication
  
  // Check authentication status before initializing
  const checkAuth = () => {
    const token = localStorage.getItem('bersekolah_auth_token');
    if (!token) {
      console.log('No authentication token found, redirecting to login page');
      window.location.href = '/masuk?redirect=' + encodeURIComponent(window.location.pathname);
      return false;
    }    return true;
  };
  
  // Function to display loading errors
  const showLoadingError = (message: string) => {
    console.error(message);
    const elements = ['total-beswan', 'total-documents', 'total-diterima'];
    elements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = 'Error';
        element.className = 'text-2xl font-bold text-red-500';
      }
    });
    
    const tableBody = document.getElementById('applicants-table');
    if (tableBody) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="py-10 text-center text-red-500">
            ${message}
          </td>
        </tr>
      `;    }
  };
  
  // Load dashboard data (stats and beswan list)
  const loadDashboardData = () => {
    console.log('Loading dashboard data...');
    
    // Add loading indicators to stats
    const statElements = ['total-beswan', 'total-documents', 'total-diterima'];
    statElements.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.innerHTML = '<span class="animate-pulse">...</span>';
      }
    });
    
    // Show loading indicator in the table
    const tableBody = document.getElementById('applicants-table');
    if (tableBody) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="py-10 text-center">
            <div class="flex items-center justify-center">
              <svg class="w-6 h-6 mr-3 text-blue-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span>Memuat data beswan...</span>
            </div>
          </td>
        </tr>
      `;
    }
    
    // Use Promise.allSettled to handle failures more gracefully
    return Promise.allSettled([
      fetchDashboardStats().catch(error => {
        console.error('[STATS] Error fetching dashboard stats:', error);
        throw error;
      }),
      fetchApplicants().catch(error => {
        console.error('[BESWAN] Error fetching beswan data:', error);
        throw error;
      })
    ]).then(results => {
      // Check for any failures
      const failures = results.filter(result => result.status === 'rejected');
      if (failures.length > 0) {
        console.warn('Some dashboard components failed to load:', failures);
        failures.forEach((failure: any) => {
          console.error('Failure reason:', failure.reason);
        });
      }
      
      if (failures.length === results.length) {
        // All requests failed
        showLoadingError(`Terjadi kesalahan saat memuat data: Semua permintaan gagal`);
      }
      
      return results;
    }).catch(error => {
      showLoadingError(`Terjadi kesalahan yang tidak terduga: ${error?.message || 'Unknown error'}`);
      console.error('Unexpected error during dashboard initialization:', error);
    });
  };  // Initialize dashboard on page load
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Dashboard page loaded, checking auth...');
    
    if (checkAuth()) {
      console.log('Auth check passed, initializing dashboard...');
      
      // Test API response first
      testAPIResponse();
      
      // Load dashboard data (stats and beswan list)
      console.log('Loading dashboard data...');
      loadDashboardData().then(() => {
        console.log('Initial dashboard data loaded successfully');
      }).catch(error => {
        console.error('Error during initial dashboard data load:', error);
      });
      
      // Add refresh button event listener
      const refreshButton = document.getElementById('refresh-beswan-btn') as HTMLButtonElement;
      if (refreshButton) {
        refreshButton.addEventListener('click', (e) => {
          e.preventDefault();
          console.log('Manual refresh requested...');
          
          // Test API response on refresh
          testAPIResponse();
          
          // Show refresh animation
          const originalContent = refreshButton.innerHTML;
          refreshButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Refreshing...
          `;
          refreshButton.disabled = true;
          
          // Reload data
          loadDashboardData().finally(() => {
            // Restore button after a short delay
            setTimeout(() => {
              refreshButton.innerHTML = originalContent;
              refreshButton.disabled = false;
            }, 500);
          });
        });
      } else {
        console.warn('Refresh button not found in the DOM');
      }
    }
  });
</script>
