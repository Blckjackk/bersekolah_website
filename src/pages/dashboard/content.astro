---
import DashboardAdmin from "../../layouts/dashboard-admin.astro";
import { Button } from "../../components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "../../components/ui/card";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "../../components/ui/table";
---

<DashboardAdmin>  <div class="p-6 space-y-6">
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold">Kelola Konten Website</h1>
      <a href="/dashboard/content/create">
        <Button variant="default" className="bg-[#406386]">+ Tambah Konten</Button>
      </a>
    </div>

    <!-- Content Stats Cards -->
    <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
      <Card>
        <CardContent class="flex items-center justify-between p-4">
          <div>
            <p class="text-sm text-muted-foreground">Total Konten</p>
            <h3 class="text-2xl font-bold" id="content-total">0</h3>
          </div>
          <div class="p-2 bg-blue-100 rounded-full">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-blue-600">
              <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
              <polyline points="14 2 14 8 20 8"/>
              <line x1="16" x2="8" y1="13" y2="13"/>
              <line x1="16" x2="8" y1="17" y2="17"/>
              <line x1="10" x2="8" y1="9" y2="9"/>
            </svg>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent class="flex items-center justify-between p-4">
          <div>
            <p class="text-sm text-muted-foreground">Konten Published</p>
            <h3 class="text-2xl font-bold" id="content-published">0</h3>
          </div>
          <div class="p-2 bg-green-100 rounded-full">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-green-600">
              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
              <polyline points="22 4 12 14.01 9 11.01"/>
            </svg>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent class="flex items-center justify-between p-4">
          <div>
            <p class="text-sm text-muted-foreground">Konten Draft</p>
            <h3 class="text-2xl font-bold" id="content-draft">0</h3>
          </div>
          <div class="p-2 bg-yellow-100 rounded-full">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5 text-yellow-600">
              <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
          </div>
        </CardContent>
      </Card>
    </div>

    <Card>
      <CardHeader>
        <CardTitle>Daftar Artikel dan Konten</CardTitle>
      </CardHeader>
      <CardContent className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">#</TableHead>
              <TableHead className="min-w-[180px]">Judul</TableHead>
              <TableHead className="min-w-[120px]">Kategori</TableHead>
              <TableHead className="w-[100px]">Tanggal</TableHead>
              <TableHead className="w-[80px] text-center">Status</TableHead>
              <TableHead className="w-[100px] text-center">Aksi</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody id="content-table-body">
            <TableRow>
              <TableCell colSpan={6} className="text-center py-8">
                <div class="inline-block w-8 h-8 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
                <p class="mt-2">Memuat data...</p>
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  </div>
</DashboardAdmin>

<script>
  import { ContentService } from '../../lib/content-service';

  interface Window {
    deleteContent: (id: number) => Promise<void>;
    editContent: (id: number) => void;
    toggleContentStatus: (id: number, currentStatus: string) => Promise<void>;
  }

  declare global {
    interface Window {
      deleteContent: (id: number) => Promise<void>;
      editContent: (id: number) => void;
      toggleContentStatus: (id: number, currentStatus: string) => Promise<void>;
    }
  }

  // Format date function
  function formatDate(dateString: string): string {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('id-ID', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    }).format(date);
  }

  // Load content when page loads
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Get content and stats in parallel
      const [content, stats] = await Promise.all([
        ContentService.getAllContent(),
        ContentService.getContentStats()
      ]);
      
      // Update stats if available
      if (stats) {
        const publishedEl = document.getElementById('content-published');
        const draftEl = document.getElementById('content-draft');
        const totalEl = document.getElementById('content-total');
        
        if (publishedEl) publishedEl.textContent = stats.published?.toString() || '0';
        if (draftEl) draftEl.textContent = stats.draft?.toString() || '0';
        if (totalEl) totalEl.textContent = stats.total?.toString() || '0';
      }
      
      const tableBody = document.getElementById('content-table-body');
      if (!tableBody) return;

      if (content.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colSpan="6" class="text-center py-8">
              Belum ada konten tersedia. Klik "Tambah Konten" untuk membuat konten baru.
            </td>
          </tr>
        `;
        return;
      }

      tableBody.innerHTML = content.map((item: any, index: number) => `
        <tr>
          <td>${index + 1}</td>
          <td class="font-medium">
            <div class="flex items-center">
              ${item.featured_image ? `<img src="${item.featured_image}" alt="${item.title}" class="w-10 h-10 mr-3 rounded object-cover">` : ''}
              <div class="max-w-[300px]">
                ${item.title}
                ${item.view_count ? `<span class="text-xs text-gray-500 mt-1 block">${item.view_count} views</span>` : ''}
              </div>
            </div>
          </td>
          <td>${item.category}</td>
          <td>${formatDate(item.created_at)}</td>
          <td class="text-center">
            <button 
              class="px-2 py-1 text-xs rounded-full ${getStatusColor(item.status)}" 
              onclick="toggleContentStatus(${item.id}, '${item.status}')"
            >
              ${getStatusLabel(item.status)}
            </button>
          </td>
          <td>
            <div class="flex justify-center gap-1">
              <button class="px-2 text-xs text-blue-700 bg-blue-100 rounded" onclick="editContent(${item.id})">Edit</button>
              <button class="px-2 text-xs text-red-700 bg-red-100 rounded" onclick="deleteContent(${item.id})">Hapus</button>
            </div>
          </td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Failed to load content:', error);
      const tableBody = document.getElementById('content-table-body');
      if (tableBody) {
        tableBody.innerHTML = `
          <tr>
            <td colSpan="6" class="text-center py-6 text-red-500">
              Gagal memuat data. Silakan coba lagi nanti.
            </td>
          </tr>
        `;
      }
    }
  });

  // Status helpers
  function getStatusColor(status: string): string {
    switch (status) {
      case 'published':
        return 'bg-green-100 text-green-700';
      case 'draft':
        return 'bg-yellow-100 text-yellow-700';
      case 'archived':
        return 'bg-gray-100 text-gray-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  }

  function getStatusLabel(status: string): string {
    switch (status) {
      case 'published':
        return 'Published';
      case 'draft':
        return 'Draft';
      case 'archived':
        return 'Archived';
      default:
        return status;
    }
  }

  // Handle delete content
  window.deleteContent = async (id: number): Promise<void> => {
    if (!confirm('Are you sure you want to delete this content?')) return;
    
    try {
      await ContentService.deleteContent(id);
      location.reload(); // Reload page to show updated list
    } catch (error) {
      console.error('Failed to delete content:', error);
      alert('Failed to delete content. Please try again.');
    }
  };

  // Handle edit content
  window.editContent = (id: number): void => {
    window.location.href = `/dashboard/content/${id}/edit`;
  };

  // Toggle content status
  window.toggleContentStatus = async (id: number, currentStatus: string): Promise<void> => {
    try {
      const newStatus = currentStatus === 'published' ? 'draft' : 'published';
      
      const formData = new FormData();
      formData.append('status', newStatus);
      
      await ContentService.updateContent(id, formData);
      location.reload(); // Reload page to show updated status
    } catch (error) {
      console.error('Failed to update content status:', error);
      alert('Failed to update content status. Please try again.');
    }
  };
</script>
